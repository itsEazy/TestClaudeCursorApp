name: Multi-Channel Publishing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
  SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

jobs:
  backend-unit-test:
    runs-on: ubuntu-latest
    environment:
      name: testing
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          
      - name: Run Backend Unit Tests
        run: |
          cd backend
          mvn clean test -Dtest="**/AuthControllerUnitTest,**/HelloControllerTest"

  backend-integration-test:
    runs-on: ubuntu-latest
    environment:
      name: testing
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          
      - name: Run Backend Integration Tests
        run: |
          cd backend
          mvn clean test -Dtest="**/integration/**"

  frontend-test:
    runs-on: ubuntu-latest
    environment:
      name: testing
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/TestClaudeCursorApp/package-lock.json'
          
      - name: Install Frontend Dependencies
        run: |
          cd frontend/TestClaudeCursorApp
          npm ci
          
      - name: Run Frontend Linting
        run: |
          cd frontend/TestClaudeCursorApp
          npm run lint
          
      - name: Run Frontend Tests
        run: |
          cd frontend/TestClaudeCursorApp
          npm test -- --watchAll=false --coverage=false

  android-build:
    needs: [backend-unit-test, backend-integration-test, frontend-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/TestClaudeCursorApp/package-lock.json'
          
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/TestClaudeCursorApp/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
          
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            frontend/TestClaudeCursorApp/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            
      - name: Cache Android build outputs
        uses: actions/cache@v3
        with:
          path: |
            frontend/TestClaudeCursorApp/android/app/build/intermediates
            frontend/TestClaudeCursorApp/android/app/build/tmp
          key: ${{ runner.os }}-android-build-${{ hashFiles('frontend/TestClaudeCursorApp/android/app/src/**') }}
          restore-keys: |
            ${{ runner.os }}-android-build-
            
      - name: Install Frontend Dependencies
        run: |
          cd frontend/TestClaudeCursorApp
          if [ ! -d "node_modules" ]; then npm ci; fi
          
      - name: Build Android (Fast)
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assembleDebug --parallel --build-cache --configuration-cache
          build-root-directory: frontend/TestClaudeCursorApp/android
          gradle-version: 8.13

  ios-build:
    needs: [backend-unit-test, backend-integration-test, frontend-test]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/TestClaudeCursorApp/package-lock.json'
          
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: frontend/TestClaudeCursorApp/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
          
      - name: Install Frontend Dependencies
        run: |
          cd frontend/TestClaudeCursorApp
          if [ ! -d "node_modules" ]; then npm ci; fi
          
      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: |
            frontend/TestClaudeCursorApp/ios/Pods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
            
      - name: Cache Xcode DerivedData
        uses: actions/cache@v3
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcworkspace') }}
          restore-keys: |
            ${{ runner.os }}-xcode-
            
      - name: Install CocoaPods
        run: |
          if ! command -v pod &> /dev/null; then
            sudo gem install cocoapods
          fi
          
      - name: Build iOS (Fast)
        run: |
          cd frontend/TestClaudeCursorApp/ios
          
          # Skip pod install if Pods directory exists and is up to date
          if [ ! -d "Pods" ] || [ "Podfile.lock" -nt "Pods/Manifest.lock" ]; then
            pod install --repo-update
          else
            echo "Pods are up to date, skipping pod install"
          fi
          
          # Use faster build settings
          xcodebuild -workspace TestClaudeCursorApp.xcworkspace \
            -scheme TestClaudeCursorApp \
            -configuration Debug \
            -sdk iphonesimulator \
            -arch x86_64 \
            -parallelizeTargets \
            -jobs $(sysctl -n hw.ncpu) \
            build

  deploy:
    needs: [android-build, ios-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/ec2-key.pem
          chmod 600 ~/.ssh/ec2-key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
          # Verify key format
          head -1 ~/.ssh/ec2-key.pem
          tail -1 ~/.ssh/ec2-key.pem
          
          # Test SSH connection
          ssh -i ~/.ssh/ec2-key.pem -o ConnectTimeout=10 -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"
          
      - name: Deploy to AWS EC2
        run: |
          echo "üöÄ Deploying to AWS EC2..."
          
          # Create app directory on server
          ssh -i ~/.ssh/ec2-key.pem ec2-user@${{ secrets.EC2_HOST }} "mkdir -p /home/ec2-user/app"
          
          # Copy source code (excluding build artifacts)
          rsync -avz --progress -e "ssh -i ~/.ssh/ec2-key.pem" \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude 'target' \
            --exclude '.DS_Store' \
            --exclude '*.log' \
            --exclude 'android/.gradle' \
            --exclude 'android/app/.cxx' \
            --exclude 'android/app/build' \
            --exclude 'ios/build' \
            --exclude '*.apk' \
            ./backend ./frontend ./docker-compose.prod.yml \
            ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/app/
          
          # Build and deploy containers
          ssh -i ~/.ssh/ec2-key.pem ec2-user@${{ secrets.EC2_HOST }} \
            "cd /home/ec2-user/app && \
             docker-compose -f docker-compose.prod.yml down && \
             docker-compose -f docker-compose.prod.yml build backend && \
             docker-compose -f docker-compose.prod.yml up -d backend"
          
          # Verify deployment
          echo "‚úÖ Checking deployment status..."
          ssh -i ~/.ssh/ec2-key.pem ec2-user@${{ secrets.EC2_HOST }} \
            "cd /home/ec2-user/app && docker-compose -f docker-compose.prod.yml ps"
          
      - name: Health Check
        run: |
          echo "üè• Performing health check..."
          sleep 30
          
          # Check if backend is healthy via load balancer
          if curl -f http://testclaudecursor-alb-1183948507.us-east-1.elb.amazonaws.com/hello; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ùå Health check failed!"
            exit 1
          fi
          
      - name: Deployment Summary
        if: success()
        run: |
          echo "üéâ Deployment successful!"
          echo "üåê Backend API: http://testclaudecursor-alb-1183948507.us-east-1.elb.amazonaws.com"
          echo "üì± Endpoints available:"
          echo "  - GET /hello"
          echo "  - POST /auth/login" 